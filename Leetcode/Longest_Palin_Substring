# Given a string s, return the longest palindromic substring in s.

class Solution:
    def longestPalindrome(self, s: str) -> str:

        if not s:
            return ""
        start = 0  # start and end of palidromic substing
        end = 0

        for i in range(len(s)):

            len1 = self.expand_from_middle(i, i, s)  # "racecar" when. 'i' is at 'e'
            len2 = self.expand_from_middle(i, i + 1, s)  # "abba" when 'i' & "i+1" is at b
            max_len = max(len1, len2)
            if end - start < max_len:  # adjusting the start and end based on the new found max_len of palindromic substring

                start = i - int((max_len - 1) / 2)
                end = i + int(max_len / 2)
        return s[start:end + 1]

    def expand_from_middle(self, left: int, right: int, s: str) -> int:

        if not s and left > right:
            return 0

        while (left >= 0 and right < len(s) and s[left] == s[right]):
            right += 1
            left -= 1

        return right - left - 1
